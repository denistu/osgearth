/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_MAPBOXGL_IMAGE_LAYER
#define OSGEARTH_MAPBOXGL_IMAGE_LAYER 1

#include <osgEarth/ImageLayer>
#include <osgEarth/FeatureSource>
#include <osgEarth/JsonUtils>

namespace osgEarth
{
    class OSGEARTH_EXPORT MapBoxStyleSheet
    {
    public:

        class Source
        {
        public:
            Source();

            const std::string& attribution() const;
            std::string& attribution();

            const std::string& url() const;
            std::string& url();

            const std::string& type() const;
            std::string& type();

            const std::string& name() const;
            std::string& name();

            const std::vector< std::string >& tiles() const;
            std::vector< std::string >& tiles();

            FeatureSource* featureSource();
            const FeatureSource* featureSource() const;

            void loadFeatureSource(const std::string& styleSheetURI, const osgDB::Options* options);


        private:


            std::string _attribution;
            std::string _url;
            std::string _type;
            std::string _name;

            std::vector< std::string > _tiles;

            osg::ref_ptr< FeatureSource > _featureSource;
        };

        // https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/#paint-property
        class Paint
        {
        public:
            Paint();

            const optional<std::string>& backgroundColor() const;
            optional<std::string>& backgroundColor();

            const optional<float>& backgroundOpacity() const;
            optional<float>& backgroundOpacity();

            const optional<std::string>& fillColor() const;
            optional<std::string>& fillColor();

            const optional<std::string>& lineColor() const;
            optional<std::string>& lineColor();

            const optional<float>& lineWidth() const;
            optional<float>& lineWidth();

            const optional<std::string>& textField() const;
            optional<std::string>& textField();

            const optional<std::string>& textColor() const;
            optional<std::string>& textColor();

            const optional<std::string>& textHaloColor() const;
            optional<std::string>& textHaloColor();

            const optional<float>& textSize() const;
            optional<float>& textSize();

            const optional<std::string>& iconImage() const;
            optional<std::string>& iconImage();

            const optional<std::string>& visibility() const;
            optional<std::string>& visibility();


        private:

            //Background
            optional<std::string> _backgroundColor;
            optional<float> _backgroundOpacity;
            // std::string _backgroundPattern;

            // Fill
            optional<bool> _fillAntialias;
            optional<std::string> _fillColor;
            optional<float> _fillOpacity;
            optional<std::string> _fillOutlineColor;
            // std::string _fillPattern;
            optional<float> _fillSortKey;
            // fill-translate
            // fill-translate-anchor

            // Line
            optional<std::string> _lineColor;
            optional<float> _lineWidth;

            // Text
            optional<std::string> _textField;
            optional<std::string> _textColor;
            optional<std::string> _textHaloColor;
            optional<float> _textSize;

            // Icon
            optional<std::string> _iconImage;

            optional<std::string> _visibility;


        };

        class FilterExpression
        {
            public:
            Json::Value _filter;
        };

        class Layer
        {
        public:
            Layer();

            const std::string& id() const;
            std::string& id();

            const std::string& source() const;
            std::string& source();

            const std::string& sourceLayer() const;
            std::string& sourceLayer();

            const std::string& type() const;
            std::string& type();


            const unsigned int& minZoom() const;
            unsigned int& minZoom();

            const unsigned int& maxZoom() const;
            unsigned int& maxZoom();

            Paint& paint();
            const Paint& paint() const;

            FilterExpression& filter();
            const FilterExpression& filter() const;

        private:
            std::string _id;
            std::string _source;
            std::string _sourceLayer;
            std::string _type;
            unsigned int _minZoom = 0;
            unsigned int _maxZoom = 24;
            Paint _paint;
            FilterExpression _filter;
        };

        const std::string& version() const;

        const std::string& name() const;

        const URI& glyphs() const;

        const URI& sprite() const;


        std::vector< Layer >& layers();
        const std::vector< Layer >& layers() const;

        std::vector< Source >& sources();
        const std::vector< Source >& sources() const;

        const ResourceLibrary* spriteLibrary() const;

        static MapBoxStyleSheet load(const URI& location, const osgDB::Options* options);

        MapBoxStyleSheet();

    private:

        std::string _version;
        std::string _name;
        URI _sprite;
        URI _glyphs;

        std::vector< Source > _sources;
        std::vector< Layer > _layers;

        osg::ref_ptr< ResourceLibrary > _spriteLibrary;
        static ResourceLibrary* loadSpriteLibrary(const URI& sprite);
    };




    class OSGEARTH_EXPORT MapBoxGLImageLayer : public osgEarth::ImageLayer
    {
    public: // serialization
        class OSGEARTH_EXPORT Options : public ImageLayer::Options {
        public:
            META_LayerOptions(osgEarth, Options, ImageLayer::Options);
            OE_OPTION(URI, url);
            virtual Config getConfig() const;
        private:
            void fromConfig( const Config& conf );
        };

    public:
        META_Layer(osgEarth, MapBoxGLImageLayer, Options, osgEarth::ImageLayer, MapboxGLImage);

        //! URL of the style url
        void setURL(const URI& value);
        const URI& getURL() const;

        // Opens the layer and returns a status
        virtual Status openImplementation();

        virtual GeoImage createImageImplementation(const TileKey& key, ProgressCallback* progress) const;

    protected: // Layer

        // Called by Map when it adds this layer
        virtual void addedToMap(const class Map*);

        // Called by Map when it removes this layer
        virtual void removedFromMap(const class Map*);

        // post-ctor initialization
        virtual void init();

    protected:

        virtual ~MapBoxGLImageLayer() { }

        osg::observer_ptr< const osgEarth::Map > _map;
        MapBoxStyleSheet _styleSheet;
    };
} // namespace osgEarth

OSGEARTH_SPECIALIZE_CONFIG(osgEarth::MapBoxGLImageLayer::Options);

#endif // OSGEARTH_MAPBOXGL_IMAGE_LAYER
